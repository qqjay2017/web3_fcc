{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Pragma\npragma solidity ^0.8.8;\n// Import\nimport \"./PriceConverter.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n// Error Codes\nerror FundMe__NotOwner();\n\n/**\n * @title a contract for crowd  funding\n * @author huang\n * @notice this is demo\n * @dev 1\n */\n\ncontract FundMe {\n    // Type declarations\n    using PriceConverter for uint256;\n\n    // State variables\n    mapping(address => uint256) public addressToAmountFunded;\n    //  constant 可以省gas\n    uint256 public constant MINIMUM_USD = 1 * 1e18;\n\n    address[] public funders;\n\n    address public immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n\n    // Modifiers\n    modifier onlyOwner() {\n        if (msg.sender == i_owner) {\n            revert FundMe__NotOwner();\n        }\n\n        //  require(msg.sender == i_owner,\"Sender is not owner\");\n        //  下划线指剩余代码\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // 捐款\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Didn't send enough!\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    // 提现\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex = funderIndex + 1\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);\n        // https://solidity-by-example.org/sending-ether/\n        // transer\n        //  payable(msg.sender ).transfer(address(this).balance);\n\n        // send\n        //  bool sendSuccess =  payable(msg.sender ).send(address(this).balance);\n        //  require(sendSuccess,\"Send Failed\");\n\n        // call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Send Failed\");\n    }\n\n    // https://solidity-by-example.org/fallback/\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n \n\n    function getPrice ( AggregatorV3Interface  priceFeed ) internal view returns (uint256){\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e); \n        // ABI\n        // Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        (\n            /*uint80 roundID*/,\n            int price,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n    function getConversionRate(uint256 ethAmount ,  AggregatorV3Interface  priceFeed )internal view returns (uint256){\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n\n    }\n\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}